{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","href","url","target","src","imageSrc","alt","name","address","city","state","zipCode","category","price","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","handleKeyPress","handleSortByChange","sortByOptions","sortByOption","setState","searchYelp","event","value","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","renderSortByOptions","placeholder","onChange","onKeyPress","Yelp","search","fetch","headers","Authorization","process","then","response","json","jsonResponse","console","log","image_url","address1","zip_code","categories","title","review_count","distance","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48683b49.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component{\n    render(){\n        const business  = this.props.business; // const {business} = this.props;\n        return(\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <a href = {business.url} target=\"_blank\" >\n                        <img src={business.imageSrc} alt=''/>\n                    </a> \n                </div>\n                \n                <h2>{business.name}</h2>\n                \n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <p>{business.address}</p>\n                        <p>{business.city}</p>\n                        <p>{business.state} {business.zipCode}</p>  \n                        {/* <p> {business.url} </p>                       */}\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{business.category} {business.price}</h3>\n                        <h3 className=\"rating\"> {business.rating} stars</h3>\n                        <p>{business.reviewCount} reviews</p>\n                        \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n    render(){\n        return (\n            <div className=\"BusinessList\">\n                {\n                    this.props.businesses.map(business=>{\n                        return <Business business={business} key ={business.id}/>\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //Default location so that user can just search a food or restraunt and hit enter without crashing the app. Default sortBy as best_match as per Yelp API.\n    this.state = {\n      term: '',\n      location: 'Sydney, NSW', \n      sortBy: 'best_match'\n    };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleSortByChange = this.handleSortByChange.bind(this);\n\n    this.sortByOptions = {\n      'Best Match': 'best_match',\n      'Highest Rated': 'rating',\n      'Most Reviewed': 'review_count',\n      'Least Distance': 'distance'\n    };\n  }\n\n  getSortByClass(sortByOption) {\n    if (this.state.sortBy === sortByOption) {\n      return 'active';\n    }\n    return '';\n  }\n\n  handleSortByChange(sortByOption) {\n    this.setState({sortBy: sortByOption});\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n  }\n\n  handleTermChange(event) {\n    this.setState({term: event.target.value});\n  }\n\n  handleLocationChange(event) {\n    this.setState({location: event.target.value});\n  }\n\n  handleSearch(event) {\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n\n    event.preventDefault();\n  }\n\n  handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n\n      event.preventDefault();\n    }\n    \n  };\n  \n  renderSortByOptions() {\n    return Object.keys(this.sortByOptions).map(sortByOption => {\n      let sortByOptionValue = this.sortByOptions[sortByOption];\n      return (<li className={this.getSortByClass(sortByOptionValue)}\n                  key={sortByOptionValue}\n                  onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\n                {sortByOption}\n             </li>);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <div className=\"SearchBar-sort-options\">\n          <ul>\n            {this.renderSortByOptions()}\n          </ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n          <input placeholder=\"Search food or bussinesses\" onChange={this.handleTermChange} onKeyPress={this.handleKeyPress}/>\n          <input placeholder=\"Location\" onChange={this.handleLocationChange} onKeyPress={this.handleKeyPress}/>\n          \n        </div>\n        <div className=\"SearchBar-submit\">\n          <a onClick={this.handleSearch}>Search</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","const apiKey= process.env.REACT_APP_YELP_API_KEY;\n\nconst Yelp = {\n    search(term, location, sortBy){\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {headers:{\n            Authorization: `Bearer ${apiKey}`\n        }}).then(response=>response.json())\n        .then(jsonResponse=>{\n            if(jsonResponse.businesses){\n                return jsonResponse.businesses.map((business)=>{\n                    console.log(business)\n                    return {\n                        id:business.id,\n                        imageSrc: business.image_url,\n                        name: business.name,\n                        address: business.location.address1,\n                        city: business.location.city,\n                        state: business.location.state,\n                        zipCode: business.location.zip_code,\n                        category: business.categories[0].title,\n                        rating: business.rating,\n                        reviewCount: business.review_count,\n                        price: business.price,\n                        distance: business.distance,\n                        url: business.url\n                    } \n                })\n            }\n        })\n    }\n}\nexport default Yelp;\n","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      businesses: []\n    }\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  \n  searchYelp(term, location, sortBy){\n    //console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}. `)\n    Yelp.search(term, location, sortBy)\n      .then(businesses=>{\n        this.setState({\n          businesses: businesses\n        });\n      })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>🍔 🍻 🧁 🍕 🍽️ 🥡</h1>\n          <SearchBar searchYelp = {this.searchYelp} />\n          <BusinessList businesses={this.state.businesses}/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}